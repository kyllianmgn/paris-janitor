generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id                Int                 @id @default(autoincrement())
  username          String
  password          String
  AdminRefreshToken AdminRefreshToken[]

  @@map("admins")
}

model User {
  id                  Int                  @id @default(autoincrement())
  firstName           String
  lastName            String
  email               String               @unique
  password            String
  bannedUntil         DateTime?
  refreshTokens       RefreshToken[]
  resetPasswordTokens ResetPasswordToken[]
  Landlord            Landlord?
  Traveler            Traveler?
  ServiceProvider     ServiceProvider?

  @@map("users")
}

model Landlord {
  id            Int             @id @default(autoincrement())
  userId        Int             @unique
  user          User            @relation(references: [id], fields: [userId], onDelete: Cascade)
  property      Property[]
  ServiceReview ServiceReview[]

  @@map("landlords")
}

model Property {
  id             Int                  @id @default(autoincrement())
  landlordId     Int
  landlord       Landlord             @relation(references: [id], fields: [landlordId])
  address        String
  postalCode     String
  city           String
  country        String
  description    String
  pricePerNight  Decimal              @default(100)
  status         PropertyStatus       @default(PENDING)
  occupations    PropertyOccupation[]
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  PropertyReview PropertyReview[]

  @@map("properties")
}

model PropertyReview {
  id         Int      @id @default(autoincrement())
  travelerId Int
  traveler   Traveler @relation(references: [id], fields: [travelerId])
  propertyId Int
  property   Property @relation(references: [id], fields: [propertyId])
  note       Decimal
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("property_reviews")
}

enum PropertyStatus {
  PENDING
  APPROVED
  REJECTED
  DISABLED
}

model PropertyOccupation {
  id           Int                  @id @default(autoincrement())
  propertyId   Int
  property     Property             @relation(fields: [propertyId], references: [id])
  startDate    DateTime
  endDate      DateTime
  reservation  PropertyReservation?
  intervention Intervention?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt

  @@map("property_occupations")
}

model PropertyReservation {
  id           Int                @id @default(autoincrement())
  travelerId   Int
  traveler     Traveler           @relation(fields: [travelerId], references: [id])
  occupationId Int                @unique
  occupation   PropertyOccupation @relation(fields: [occupationId], references: [id], onDelete: Cascade)
  status       ReservationStatus
  totalPrice   Decimal
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  @@map("property_reservations")
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  DISABLED
}

model Traveler {
  id             Int                   @id @default(autoincrement())
  userId         Int                   @unique
  user           User                  @relation(references: [id], fields: [userId], onDelete: Cascade)
  reservations   PropertyReservation[]
  ServiceReview  ServiceReview[]
  PropertyReview PropertyReview[]

  @@map("travelers")
}

model ServiceProvider {
  id         Int                   @id @default(autoincrement())
  userId     Int                   @unique
  user       User                  @relation(references: [id], fields: [userId], onDelete: Cascade)
  services   Service[]
  occupation ProviderOccupation[]
  status     ServiceProviderStatus @default(PENDING)

  @@map("service_providers")
}

enum ServiceProviderStatus {
  PENDING
  ACCEPTED
  REFUSED
}

model ProviderOccupation {
  id           Int             @id @default(autoincrement())
  providerId   Int
  provider     ServiceProvider @relation(fields: [providerId], references: [id])
  startDate    DateTime
  endDate      DateTime
  intervention Intervention?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  @@map("provider_occupations")
}

model Service {
  id           Int             @id @default(autoincrement())
  providerId   Int
  provider     ServiceProvider @relation(references: [id], fields: [providerId])
  intervention Intervention[]
  type         ServiceType     @default(MISSION)
  name         String
  description  String
  basePrice    Decimal
  reviews      ServiceReview[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  @@map("services")
}

enum ServiceType {
  INTERVENTION
  MISSION
}

model ServiceReview {
  id         Int       @id @default(autoincrement())
  serviceId  Int
  service    Service   @relation(references: [id], fields: [serviceId])
  travelerId Int?
  traveler   Traveler? @relation(references: [id], fields: [travelerId])
  landlordId Int?
  landlord   Landlord? @relation(references: [id], fields: [landlordId])
  note       Decimal
  comment    String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("service_reviews")
}

model Intervention {
  id                   Int                 @id @default(autoincrement())
  serviceId            Int
  service              Service             @relation(fields: [serviceId], references: [id])
  propertyOccupationId Int?                @unique
  propertyOccupation   PropertyOccupation? @relation(fields: [propertyOccupationId], references: [id])
  providerOccupationId Int                 @unique
  providerOccupation   ProviderOccupation  @relation(fields: [providerOccupationId], references: [id])
  additionalPrice      Decimal
  status               InterventionStatus
  intervention         InterventionForm?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt

  @@map("interventions")
}

enum InterventionStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model InterventionForm {
  id             Int          @id @default(autoincrement())
  interventionId Int          @unique
  intervention   Intervention @relation(references: [id], fields: [interventionId])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("intervention_forms")
}

model Invoice {
  id          Int           @id @default(autoincrement())
  amount      Decimal
  description String
  status      InvoiceStatus
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("invoice")
}

enum InvoiceStatus {
  PENDING
  PAID
  CANCELLED
}

model RefreshToken {
  id          String   @id @unique @default(uuid())
  hashedToken String
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId], map: "refreshToken_userId_fkey")
  @@map("refresh_token")
}

model AdminRefreshToken {
  id          String   @id @unique @default(uuid())
  hashedToken String
  adminId     Int
  admin       Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([adminId], map: "refreshToken_adminId_fkey")
  @@map("admin_refresh_token")
}

model ResetPasswordToken {
  userId    Int      @id
  user      User     @relation(fields: [userId], references: [id])
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reset_password_token")
}
